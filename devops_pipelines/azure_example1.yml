parameters:
- name: image
  displayName: Pool Image
  type: string
  default: ubuntu-latest
  values:
  - ubuntu-latest

trigger:
  batch: false
  branches:
    include:
    - azure_example1_terraform_devops_pipeline
  paths:
    include:
    - terraform/azure-infra/example1/

stages :
  - stage: Installation
    jobs:
    - job: Install_Terraform
      continueOnError: false
      pool:
        vmImage: '${{ parameters.image }}'
      steps:
      - task: TerraformInstaller
        displayName: Install terraform
    - job: Init_Provider
      steps:
      - task: TerraformCLI
          displayName: 'terraform init'
          inputs:
            backendType: azurerm
            command: Init
            backendServiceArm: 'WSBAzureSP'
            # create backend storage account if doesn't exist
            ensureBackend: true
            backendAzureRmStorageAccountSku: 'Standard_LRS'
            backendAzureRmResourceGroupName: 'Terraform'
            backendAzureRmResourceGroupLocation: 'North Europe'
            backendAzureRmStorageAccountName: 'storagefortfcode'
            backendAzureRmContainerName: 'terraform'
            backendAzureRmKey: 'terraform.tfstate'
#  - stage: Validation
#    jobs:
#    - job: Validate_code
#      steps:
#      - task: TerraformTaskV2@2
#        displayName: 'validate'
#        inputs:
#          provider: 'azurerm'
#          command: 'validate'
#          backendServiceArm: 'WSBAzureSP'
#  - stage: Deployment
#    jobs:
#    - job: Terraform_plan
#      steps:
#        - task: TerraformTaskV1@0
#          displayName: 'plan'
#          inputs:
#            provider: 'azurerm'
#            command: 'plan'
#            environmentServiceNameAzureRM: 'WSBAzureSP'
#            workingDirectory: '$(System.DefaultWorkingDirectory)\terraform\terra'
#        - task: TerraformTaskV1@0
#          displayName: 'apply'
#          inputs:
#            provider: 'azurerm'
#            command: 'apply'
#            environmentServiceNameAzureRM: 'tamopstf'
          
