---
- name: Base config
  hosts: all
  gather_facts: true
  become_user: root
  become_method: sudo
  become: true

  vars:
    packages:
      - docker.io
      - python3
      - python3-pip
    python_pip_packages:
      - docker-py
    mount_point: "/datadisk"

  
  pre_tasks:
  - name: check connectivity
    ping:
  - name: Check data disk size ( if equal ir less then 0 job fails)
    block: 
      - parted: device=/dev/sdb unit=MiB
        register: sdb_info
      - fail:
        when: "{{ sdb_info.disk.size|int }} <= 0"
      
  tasks:
  - name: Update /etc/hosts
    blockinfile:
      path: /etc/hosts
      block: |
        {% for host in groups['all'] %}
        {{ hostvars[host].ansible_host }} {{ host }}
        {% endfor %}

  - name: create admin group "admins"
    group:
      name: admins
      state: present
    tags:
      - user_mgmnt

  - name: Create users
    ansible.builtin.user:
      name: "{{ item.name }}"
      state: present
      shell:  "{{ item.shell }}"
      groups: "{{ item.groups }}"
      create_home: yes
    no_log: True
    loop:
    - { name: 'przemek', groups: 'admins', shell: '/bin/bash' }
    tags:
    - user_mgmnt

  - name: Update authorized keys
    authorized_key:
      user: "{{ item }}"
      state: present
      key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    with_items:
      - przemek
    tags:
      - user_mgmnt
  
  - name: Allow sudo for admins group
    copy:
      content: "%admins ALL=(ALL) NOPASSWD:ALL"
      dest: /etc/sudoers.d/admins
      mode: 0600
    tags:
      - user_mgmnt

  - name: Update system
    apt:
      name: "*"
      state: latest
      update_cache: yes
      autoremove: yes
    tags:
     - os_config

  - name: Install OS packages
    apt:
      name: "{{ packages }}"
      state: present
    tags:
     - os_config

  - name: Install python-pip packages
    pip:
      name: "{{ python_pip_packages }}"

  - name: Set hostname
    hostname:
      name: "{{ inventory_hostname }}"
    tags:
     - os_config

  - name: Set timezone to Europe/Warsaw
    shell: timedatectl set-timezone "Europe/Warsaw"

  - name: Create mount directory
    file:
      state: directory
      path: "{{ mount_point }}"
      owner: root
      group: root
      mode: '0777'

  - name: Mount data disk
    mount:
      path: "{{ mount_point }}"
      src: /dev/sdb1
      state: present
      fstype: ext4
      opts: defaults,nofail

  - name: Refrest mount drives
    shell: mount -a

  - name: Reboot
    reboot: 
      reboot_timeout: 180
    tags:
      - reboot